{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/utils/fileUpload.ts"],"sourcesContent":["// utils/fileUpload.ts\nimport fs from 'fs';\nimport path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base upload directory\nconst uploadDir = path.join(process.cwd(), 'public', 'products', 'images');\n\n// Ensure upload directory exists\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nexport async function saveImage(file: Buffer, originalFilename: string): Promise<string> {\n  // Generate unique filename\n  const extension = path.extname(originalFilename);\n  const filename = `${uuidv4()}${extension}`;\n  \n  // Save file to disk\n  const filepath = path.join(uploadDir, filename);\n  fs.writeFileSync(filepath, file);\n  \n  \n  // Return the full URL\n  return `/products/images/${filename}`;\n}"],"names":[],"mappings":"AAAA,sBAAsB;;;;AACtB;AACA;AACA;;;;AAEA,mCAAmC;AACnC,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,YAAY;AAEjE,iCAAiC;AACjC,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,YAAY;IAC7B,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW;QAAE,WAAW;IAAK;AAC5C;AAEO,eAAe,UAAU,IAAY,EAAE,gBAAwB;IACpE,2BAA2B;IAC3B,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC/B,MAAM,WAAW,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,MAAM,WAAW;IAE1C,oBAAoB;IACpB,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,WAAW;IACtC,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU;IAG3B,sBAAsB;IACtB,OAAO,CAAC,iBAAiB,EAAE,UAAU;AACvC"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/products/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { saveImage } from '../../../../utils/fileUpload';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: Request) {\n    try {\n        const formData = await request.formData();\n        \n        // Extract basic product data\n        const productData = {\n            category: formData.get('category') as string,\n            name: formData.get('name') as string,\n            description: formData.get('description') as string,\n            price: parseFloat(formData.get('price') as string),\n            inStock: parseInt(formData.get('inStock') as string),\n            color: formData.get('color') as string,\n            material: formData.get('material') as string,\n        };\n\n        // Validate required fields\n        const missingFields = [];\n        if (!productData.name) missingFields.push('name');\n        if (!productData.category) missingFields.push('category');\n        if (isNaN(productData.price)) missingFields.push('price');\n        if (isNaN(productData.inStock)) missingFields.push('inStock');\n        \n        if (missingFields.length > 0) {\n            return NextResponse.json({\n                error: 'Missing required fields',\n                missingFields\n            }, { status: 400 });\n        }\n\n        // Handle image uploads\n        const imageUrls = [];\n        for (let i = 0; i < 4; i++) {\n            const imageFile = formData.get(`image${i}`) as File | null;\n            if (imageFile) {\n                const buffer = Buffer.from(await imageFile.arrayBuffer());\n                const imageUrl = await saveImage(buffer, imageFile.name);\n                imageUrls.push(imageUrl);\n            }\n        }\n\n        // Save product to database\n        const product = await prisma.product.create({\n            data: {\n                ...productData,\n                imageURL1: imageUrls[0] || null,\n                imageURL2: imageUrls[1] || null,\n                imageURL3: imageUrls[2] || null,\n                imageURL4: imageUrls[3] || null,\n            },\n        });\n\n        return NextResponse.json(product, { status: 201 });\n    } catch (error) {\n        console.error('Failed to create product:', error);\n        return NextResponse.json({\n            error: 'Failed to save product',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, { status: 500 });\n    }\n}\n\nexport async function GET() {\n    try {\n        const products = await prisma.product.findMany({\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n        \n        return NextResponse.json(products);\n    } catch (error) {\n        console.error('Failed to fetch products:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch products' },\n            { status: 500 }\n        );\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,WAAW,MAAM,QAAQ,QAAQ;QAEvC,6BAA6B;QAC7B,MAAM,cAAc;YAChB,UAAU,SAAS,GAAG,CAAC;YACvB,MAAM,SAAS,GAAG,CAAC;YACnB,aAAa,SAAS,GAAG,CAAC;YAC1B,OAAO,WAAW,SAAS,GAAG,CAAC;YAC/B,SAAS,SAAS,SAAS,GAAG,CAAC;YAC/B,OAAO,SAAS,GAAG,CAAC;YACpB,UAAU,SAAS,GAAG,CAAC;QAC3B;QAEA,2BAA2B;QAC3B,MAAM,gBAAgB,EAAE;QACxB,IAAI,CAAC,YAAY,IAAI,EAAE,cAAc,IAAI,CAAC;QAC1C,IAAI,CAAC,YAAY,QAAQ,EAAE,cAAc,IAAI,CAAC;QAC9C,IAAI,MAAM,YAAY,KAAK,GAAG,cAAc,IAAI,CAAC;QACjD,IAAI,MAAM,YAAY,OAAO,GAAG,cAAc,IAAI,CAAC;QAEnD,IAAI,cAAc,MAAM,GAAG,GAAG;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;gBACP;YACJ,GAAG;gBAAE,QAAQ;YAAI;QACrB;QAEA,uBAAuB;QACvB,MAAM,YAAY,EAAE;QACpB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;YACxB,MAAM,YAAY,SAAS,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG;YAC1C,IAAI,WAAW;gBACX,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,UAAU,WAAW;gBACtD,MAAM,WAAW,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,UAAU,IAAI;gBACvD,UAAU,IAAI,CAAC;YACnB;QACJ;QAEA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YACxC,MAAM;gBACF,GAAG,WAAW;gBACd,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;YAC/B;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACtD,GAAG;YAAE,QAAQ;QAAI;IACrB;AACJ;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;YAC3C,SAAS;gBACL,WAAW;YACf;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}