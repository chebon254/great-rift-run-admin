{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/spaces-client.ts"],"sourcesContent":["import { S3Client } from \"@aws-sdk/client-s3\";\n\nexport const spacesClient = new S3Client({\n  endpoint: `https://${process.env.SPACES_REGION}.digitaloceanspaces.com`,\n  region: process.env.SPACES_REGION,\n  credentials: {\n    accessKeyId: process.env.SPACES_KEY!,\n    secretAccessKey: process.env.SPACES_SECRET!\n  }\n});"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,eAAe,IAAI,iJAAA,CAAA,WAAQ,CAAC;IACvC,UAAU,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,uBAAuB,CAAC;IACvE,QAAQ,QAAQ,GAAG,CAAC,aAAa;IACjC,aAAa;QACX,aAAa,QAAQ,GAAG,CAAC,UAAU;QACnC,iBAAiB,QAAQ,GAAG,CAAC,aAAa;IAC5C;AACF"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/utils/imageUpload.ts"],"sourcesContent":["import { PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { spacesClient } from \"../lib/spaces-client\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport async function uploadImage(file: Buffer, originalFilename: string, folder: 'products' | 'blogs'): Promise<string> {\n  const extension = originalFilename.split('.').pop();\n  const filename = `${uuidv4()}.${extension}`;\n  const key = `${folder}/${filename}`;\n\n  await spacesClient.send(\n    new PutObjectCommand({\n      Bucket: process.env.SPACES_BUCKET,\n      Key: key,\n      Body: file,\n      ACL: \"public-read\",\n      ContentType: `image/${extension}`\n    })\n  );\n\n  return `https://${process.env.SPACES_BUCKET}.${process.env.SPACES_REGION}.digitaloceanspaces.com/${key}`;\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,YAAY,IAAY,EAAE,gBAAwB,EAAE,MAA4B;IACpG,MAAM,YAAY,iBAAiB,KAAK,CAAC,KAAK,GAAG;IACjD,MAAM,WAAW,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,IAAI,CAAC,EAAE,WAAW;IAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,UAAU;IAEnC,MAAM,yHAAA,CAAA,eAAY,CAAC,IAAI,CACrB,IAAI,iJAAA,CAAA,mBAAgB,CAAC;QACnB,QAAQ,QAAQ,GAAG,CAAC,aAAa;QACjC,KAAK;QACL,MAAM;QACN,KAAK;QACL,aAAa,CAAC,MAAM,EAAE,WAAW;IACnC;IAGF,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,wBAAwB,EAAE,KAAK;AAC1G"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/products/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { uploadImage } from '../../../../utils/imageUpload';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    \n    const productData = {\n      category: formData.get('category') as string,\n      name: formData.get('name') as string,\n      description: formData.get('description') as string,\n      price: parseFloat(formData.get('price') as string),\n      inStock: parseInt(formData.get('inStock') as string),\n      color: formData.get('color') as string,\n      material: formData.get('material') as string,\n      deletedAt: null, // Explicitly set deletedAt to null for new products\n    };\n\n    // Validate required fields\n    const missingFields = [];\n    if (!productData.name) missingFields.push('name');\n    if (!productData.category) missingFields.push('category');\n    if (isNaN(productData.price)) missingFields.push('price');\n    if (isNaN(productData.inStock)) missingFields.push('inStock');\n    \n    if (missingFields.length > 0) {\n      return NextResponse.json({\n        error: 'Missing required fields',\n        missingFields\n      }, { status: 400 });\n    }\n\n    // Handle image uploads\n    const imageUrls = [];\n    for (let i = 0; i < 4; i++) {\n      const imageFile = formData.get(`image${i}`) as File | null;\n      if (imageFile) {\n        const buffer = Buffer.from(await imageFile.arrayBuffer());\n        const imageUrl = await uploadImage(buffer, imageFile.name, 'products');\n        imageUrls.push(imageUrl);\n      }\n    }\n\n    // Save product to database\n    const product = await prisma.product.create({\n      data: {\n        ...productData,\n        imageURL1: imageUrls[0] || null,\n        imageURL2: imageUrls[1] || null,\n        imageURL3: imageUrls[2] || null,\n        imageURL4: imageUrls[3] || null,\n      },\n    });\n\n    return NextResponse.json(product, { status: 201 });\n  } catch (error) {\n    console.error('Failed to create product:', error);\n    return NextResponse.json({\n      error: 'Failed to save product',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  } finally {\n    await prisma.$disconnect(); // Always disconnect after operations\n  }\n}\n\nexport async function GET() {\n  try {\n    const products = await prisma.product.findMany({\n      orderBy: {\n        createdAt: 'desc'\n      },\n      where: {\n        deletedAt: null\n      }\n    });\n      \n    return NextResponse.json(products);\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch products' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QAEvC,MAAM,cAAc;YAClB,UAAU,SAAS,GAAG,CAAC;YACvB,MAAM,SAAS,GAAG,CAAC;YACnB,aAAa,SAAS,GAAG,CAAC;YAC1B,OAAO,WAAW,SAAS,GAAG,CAAC;YAC/B,SAAS,SAAS,SAAS,GAAG,CAAC;YAC/B,OAAO,SAAS,GAAG,CAAC;YACpB,UAAU,SAAS,GAAG,CAAC;YACvB,WAAW;QACb;QAEA,2BAA2B;QAC3B,MAAM,gBAAgB,EAAE;QACxB,IAAI,CAAC,YAAY,IAAI,EAAE,cAAc,IAAI,CAAC;QAC1C,IAAI,CAAC,YAAY,QAAQ,EAAE,cAAc,IAAI,CAAC;QAC9C,IAAI,MAAM,YAAY,KAAK,GAAG,cAAc,IAAI,CAAC;QACjD,IAAI,MAAM,YAAY,OAAO,GAAG,cAAc,IAAI,CAAC;QAEnD,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP;YACF,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,uBAAuB;QACvB,MAAM,YAAY,EAAE;QACpB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;YAC1B,MAAM,YAAY,SAAS,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG;YAC1C,IAAI,WAAW;gBACb,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,UAAU,WAAW;gBACtD,MAAM,WAAW,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,UAAU,IAAI,EAAE;gBAC3D,UAAU,IAAI,CAAC;YACjB;QACF;QAEA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACJ,GAAG,WAAW;gBACd,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;gBAC3B,WAAW,SAAS,CAAC,EAAE,IAAI;YAC7B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB,SAAU;QACR,MAAM,OAAO,WAAW,IAAI,qCAAqC;IACnE;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;YAC7C,SAAS;gBACP,WAAW;YACb;YACA,OAAO;gBACL,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}