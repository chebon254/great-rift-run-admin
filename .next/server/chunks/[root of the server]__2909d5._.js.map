{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nconst prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SACJ,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/contacts/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport prisma from \"../../../../lib/prisma\";\n\n// In src/app/api/contacts/route.ts, add this GET handler\nexport async function GET(request: Request) {\n    const { searchParams } = new URL(request.url);\n    const filter = searchParams.get('filter');\n  \n    try {\n      const contacts = await prisma.contact.findMany({\n        orderBy: {\n          createdAt: 'desc',\n        },\n      });\n  \n      if (filter) {\n        const filteredContacts = contacts.filter(contact => {\n          const subject = contact.subject.toUpperCase();\n          if (filter === 'events') {\n            return subject.includes('GREAT RIFT RUN');\n          } else if (filter === 'program') {\n            return (\n              subject.includes('RUN WITH LEGENDS') ||\n              subject.includes('OPEN SEASON COURSE') ||\n              subject.includes('SCHOOL CAMP')\n            );\n          }\n          return true;\n        });\n        return NextResponse.json(filteredContacts);\n      }\n  \n      return NextResponse.json(contacts);\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      return NextResponse.json(\n        { success: false, error: \"Failed to fetch contacts\" },\n        { status: 500 }\n      );\n    }\n  }"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;IAEhC,IAAI;QACF,MAAM,WAAW,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,SAAS;gBACP,WAAW;YACb;QACF;QAEA,IAAI,QAAQ;YACV,MAAM,mBAAmB,SAAS,MAAM,CAAC,CAAA;gBACvC,MAAM,UAAU,QAAQ,OAAO,CAAC,WAAW;gBAC3C,IAAI,WAAW,UAAU;oBACvB,OAAO,QAAQ,QAAQ,CAAC;gBAC1B,OAAO,IAAI,WAAW,WAAW;oBAC/B,OACE,QAAQ,QAAQ,CAAC,uBACjB,QAAQ,QAAQ,CAAC,yBACjB,QAAQ,QAAQ,CAAC;gBAErB;gBACA,OAAO;YACT;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA2B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}