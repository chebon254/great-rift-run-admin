{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nconst prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SACJ,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/orders/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '../../../../../lib/prisma';\n\nexport async function GET(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const order = await prisma.order.findUnique({\n      where: {\n        id: parseInt((await params).id),\n      },\n      include: {\n        address: true,\n        items: {\n          include: {\n            product: {\n              select: {\n                name: true,\n                imageURL1: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!order) {\n      return NextResponse.json({ error: 'Order not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(order);\n  } catch {\n    return NextResponse.json({ error: 'Failed to fetch order details' }, { status: 500 });\n  }\n}\n\nexport async function PATCH(\n  request: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const body = await request.json();\n    const order = await prisma.order.update({\n      where: {\n        id: parseInt((await params).id),\n      },\n      data: {\n        orderProgress: body.status,\n      },\n    });\n\n    return NextResponse.json(order);\n  } catch {\n    return NextResponse.json({ error: 'Failed to update order status' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAAuC;IACzF,IAAI;QACF,MAAM,QAAQ,MAAM,+GAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YAC1C,OAAO;gBACL,IAAI,SAAS,CAAC,MAAM,MAAM,EAAE,EAAE;YAChC;YACA,SAAS;gBACP,SAAS;gBACT,OAAO;oBACL,SAAS;wBACP,SAAS;4BACP,QAAQ;gCACN,MAAM;gCACN,WAAW;4BACb;wBACF;oBACF;gBACF;YACF;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF;AAEO,eAAe,MACpB,OAAgB,EAChB,EAAE,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,QAAQ,MAAM,+GAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACtC,OAAO;gBACL,IAAI,SAAS,CAAC,MAAM,MAAM,EAAE,EAAE;YAChC;YACA,MAAM;gBACJ,eAAe,KAAK,MAAM;YAC5B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}