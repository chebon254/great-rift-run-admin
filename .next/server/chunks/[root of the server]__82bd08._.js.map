{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nconst prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SACJ,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/utils/blogUpload.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the base upload directory for blogs\nconst uploadDir = path.join(process.cwd(), 'public', 'images', 'blogs');\n\n// Ensure upload directory exists\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nexport async function saveBlogImage(file: Buffer, originalFilename: string): Promise<string> {\n  // Generate unique filename\n  const extension = path.extname(originalFilename);\n  const filename = `${uuidv4()}${extension}`;\n  \n  // Save file to disk\n  const filepath = path.join(uploadDir, filename);\n  fs.writeFileSync(filepath, file);\n  \n  // Return the relative URL\n  return `/images/blogs/${filename}`;\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,6CAA6C;AAC7C,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,UAAU;AAE/D,iCAAiC;AACjC,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,YAAY;IAC7B,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW;QAAE,WAAW;IAAK;AAC5C;AAEO,eAAe,cAAc,IAAY,EAAE,gBAAwB;IACxE,2BAA2B;IAC3B,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;IAC/B,MAAM,WAAW,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,MAAM,WAAW;IAE1C,oBAAoB;IACpB,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,WAAW;IACtC,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,UAAU;IAE3B,0BAA0B;IAC1B,OAAO,CAAC,cAAc,EAAE,UAAU;AACpC"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/blogs/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '../../../../lib/prisma';\nimport { saveBlogImage } from '../../../../utils/blogUpload';\n\nexport async function GET() {\n  try {\n    const blogs = await prisma.blog.findMany({\n      orderBy: {\n        createdAt: 'desc'\n      }\n    });\n    return NextResponse.json(blogs);\n  } catch {\n    return NextResponse.json({ error: 'Failed to fetch blogs' }, { status: 500 });\n  }\n}\n\nexport async function POST(req: Request) {\n  try {\n    const formData = await req.formData();\n    const title = formData.get('title') as string;\n    const content = formData.get('content') as string;\n    const thumbnailFile = formData.get('thumbnail') as File;\n\n    if (!title || !content || !thumbnailFile) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const buffer = Buffer.from(await thumbnailFile.arrayBuffer());\n    const thumbnailUrl = await saveBlogImage(buffer, thumbnailFile.name);\n\n    const blog = await prisma.blog.create({\n      data: {\n        title,\n        content,\n        thumbnail: thumbnailUrl,\n      },\n    });\n\n    return NextResponse.json(blog);\n  } catch {\n    return NextResponse.json({ error: 'Failed to create blog' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,SAAS;gBACP,WAAW;YACb;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,gBAAgB,SAAS,GAAG,CAAC;QAEnC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,cAAc,WAAW;QAC1D,MAAM,eAAe,MAAM,CAAA,GAAA,qHAAA,CAAA,gBAAa,AAAD,EAAE,QAAQ,cAAc,IAAI;QAEnE,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}