{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nconst prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SACJ,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/lib/spaces-client.ts"],"sourcesContent":["import { S3Client } from \"@aws-sdk/client-s3\";\n\nexport const spacesClient = new S3Client({\n  endpoint: `https://${process.env.SPACES_REGION}.digitaloceanspaces.com`,\n  region: process.env.SPACES_REGION,\n  credentials: {\n    accessKeyId: process.env.SPACES_KEY!,\n    secretAccessKey: process.env.SPACES_SECRET!\n  }\n});"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,eAAe,IAAI,iJAAA,CAAA,WAAQ,CAAC;IACvC,UAAU,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,uBAAuB,CAAC;IACvE,QAAQ,QAAQ,GAAG,CAAC,aAAa;IACjC,aAAa;QACX,aAAa,QAAQ,GAAG,CAAC,UAAU;QACnC,iBAAiB,QAAQ,GAAG,CAAC,aAAa;IAC5C;AACF"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/utils/imageUpload.ts"],"sourcesContent":["import { PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { spacesClient } from \"../lib/spaces-client\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport async function uploadImage(file: Buffer, originalFilename: string, folder: 'products' | 'blogs'): Promise<string> {\n  const extension = originalFilename.split('.').pop();\n  const filename = `${uuidv4()}.${extension}`;\n  const key = `${folder}/${filename}`;\n\n  await spacesClient.send(\n    new PutObjectCommand({\n      Bucket: process.env.SPACES_BUCKET,\n      Key: key,\n      Body: file,\n      ACL: \"public-read\",\n      ContentType: `image/${extension}`\n    })\n  );\n\n  return `https://${process.env.SPACES_BUCKET}.${process.env.SPACES_REGION}.digitaloceanspaces.com/${key}`;\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,YAAY,IAAY,EAAE,gBAAwB,EAAE,MAA4B;IACpG,MAAM,YAAY,iBAAiB,KAAK,CAAC,KAAK,GAAG;IACjD,MAAM,WAAW,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,IAAI,CAAC,EAAE,WAAW;IAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,UAAU;IAEnC,MAAM,yHAAA,CAAA,eAAY,CAAC,IAAI,CACrB,IAAI,iJAAA,CAAA,mBAAgB,CAAC;QACnB,QAAQ,QAAQ,GAAG,CAAC,aAAa;QACjC,KAAK;QACL,MAAM;QACN,KAAK;QACL,aAAa,CAAC,MAAM,EAAE,WAAW;IACnC;IAGF,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC,wBAAwB,EAAE,KAAK;AAC1G"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/kibet/Dev/great-rift-run-admin/src/app/api/blogs/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '../../../../lib/prisma';\nimport { uploadImage } from '../../../../utils/imageUpload';\n\nexport async function POST(req: Request) {\n  try {\n    const formData = await req.formData();\n    const title = formData.get('title') as string;\n    const content = formData.get('content') as string;\n    const thumbnailFile = formData.get('thumbnail') as File;\n\n    if (!title || !content || !thumbnailFile) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const buffer = Buffer.from(await thumbnailFile.arrayBuffer());\n    const thumbnailUrl = await uploadImage(buffer, thumbnailFile.name, 'blogs');\n\n    const blog = await prisma.blog.create({\n      data: {\n        title,\n        content,\n        thumbnail: thumbnailUrl,\n      },\n    });\n\n    return NextResponse.json(blog);\n  } catch  {\n    return NextResponse.json({ error: 'Failed to create blog' }, { status: 500 });\n  }\n}\n\n\nexport async function GET() {\n  try {\n    const blogs = await prisma.blog.findMany();\n    return NextResponse.json(blogs);\n  } catch (error) {\n    console.error(\"Error fetching blogs:\", error);\n    return NextResponse.json({ error: \"Failed to fetch blogs\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,gBAAgB,SAAS,GAAG,CAAC;QAEnC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,cAAc,WAAW;QAC1D,MAAM,eAAe,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,cAAc,IAAI,EAAE;QAEnE,MAAM,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}